{"version":3,"file":"static/js/1794.31d23c47.chunk.js","mappings":"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","sources":["components/ForgotPassword/ForgotPassComponent.js","pages/Public/ForgotPass.js"],"sourcesContent":["import FormGroup from \"../../components/UI/FormGroup\";\r\nimport SimpleReactValidator from \"simple-react-validator\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { useRef, useState } from \"react\";\r\nimport { NavLink, useNavigate } from \"react-router-dom\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Grid } from \"@mui/material\";\r\nimport themeConfig from \"../../themeConfig\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport CustomButton from \"../UI/CustomButton\";\r\nimport { sendMail, verifyForgot } from \"../../redux/actions/auth/authActions\";\r\nimport config from \"../../config\";\r\nimport PasswordFormGroup from \"../UI/PasswordFormGroup\";\r\nimport HerPlanIcon from \"../../assets/images/colorHerPlan.png\";\r\nimport LoadingComponent from \"../UI/LoadingComponent\";\r\n\r\nconst useStyle = makeStyles((theme) => ({\r\n  register: {\r\n    padding: \"0 0px 22em 0px\",\r\n    width: \"70%\",\r\n    textAlign: \"center\",\r\n    margin: \"auto\",\r\n    [theme.breakpoints.down(\"md\")]: {\r\n      width: \"90%\",\r\n    },\r\n  },\r\n  logo: {\r\n    height: \"7em\",\r\n    // filter: \"brightness(1) invert(1)\",\r\n  },\r\n  title: {\r\n    fontWeight: 700,\r\n    fontSize: 35,\r\n    color: themeConfig.color1,\r\n    fontFamily: \"Montserrat\",\r\n    margin: \"0px 0px 20px 0px\",\r\n  },\r\n}));\r\nconst ForgotPassComponent = () => {\r\n  const classes = useStyle();\r\n  const history = useNavigate();\r\n  const simpleValidator = useRef(\r\n    new SimpleReactValidator({\r\n      messages: {\r\n        in: \"Password need to match!\",\r\n      },\r\n      validators: {\r\n        newPass: {\r\n          // name the rule\r\n          message:\r\n            \"Eight character minimum. at least 1 capital letter, at least one lowercase letter, at least one number, at least one symbol\",\r\n          rule: (val, params, validator) => {\r\n            return validator.helpers.testRegex(val, config.passValiadtion);\r\n          },\r\n          messageReplace: (message, params) =>\r\n            message.replace(\":values\", this.helpers.toSentence(params)), // optional\r\n          required: false, // optional\r\n        },\r\n      },\r\n    })\r\n  );\r\n\r\n  const [forgot, setForgot] = useState({\r\n    email: \"\",\r\n    pass: \"\",\r\n    repass: \"\",\r\n    code: \"\",\r\n    codeSent: false,\r\n  });\r\n  const [loading, setLoading] = useState(false);\r\n  const [, setDisplayError] = useState(false);\r\n\r\n  const dispatch = useDispatch();\r\n  const actions = bindActionCreators({ sendMail, verifyForgot }, dispatch);\r\n\r\n  const send = async () => {\r\n    if (simpleValidator.current.fieldValid(\"email\")) {\r\n      setLoading(true);\r\n      await actions.sendMail({ email: forgot.email });\r\n      setForgot((old) => {\r\n        return { ...old, codeSent: true };\r\n      });\r\n      setLoading(false);\r\n    } else {\r\n      simpleValidator.current.showMessageFor(\"email\");\r\n      await setDisplayError(() => true);\r\n    }\r\n  };\r\n\r\n  const verify = async () => {\r\n    await setDisplayError(() => false);\r\n    if (simpleValidator.current.allValid()) {\r\n      setLoading(true);\r\n\r\n      const data = {\r\n        password: forgot.pass,\r\n        code: forgot.code,\r\n      };\r\n      await actions.verifyForgot(data, history);\r\n      setLoading(false);\r\n    } else {\r\n      simpleValidator.current.showMessages();\r\n      await setDisplayError(() => true);\r\n    }\r\n  };\r\n\r\n  const setData = (field, data) =>\r\n    setForgot((old) => {\r\n      return { ...old, [field]: data };\r\n    });\r\n\r\n  const blurSetup = async (field) => {\r\n    await setDisplayError(() => false);\r\n    simpleValidator.current.showMessageFor(field);\r\n    await setDisplayError(() => true);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.register}>\r\n      {loading ? (\r\n        <LoadingComponent />\r\n      ) : (\r\n        <Grid container spacing={3}>\r\n          <Grid item lg={12} md={12} sm={12} xs={12}>\r\n            <img\r\n              src={HerPlanIcon}\r\n              className={classes.logo}\r\n              style={{ marginTop: \"124px\" }}\r\n              alt=\"logo\"\r\n            />\r\n          </Grid>\r\n          <Grid item lg={12} md={12} sm={12} xs={12}>\r\n            <div className={classes.title}>Forgot Password</div>\r\n          </Grid>\r\n          <Grid item lg={12} md={12} sm={12} xs={12}>\r\n            <FormGroup\r\n              label=\"Email Address\"\r\n              required={true}\r\n              type=\"email\"\r\n              value={forgot.email}\r\n              onChange={(data) => setData(\"email\", data)}\r\n              onBlur={() => blurSetup(\"email\")}\r\n              validator={simpleValidator.current.message(\r\n                \"email\",\r\n                forgot.email,\r\n                \"required|email\",\r\n                {\r\n                  className: \"errorClass\",\r\n                }\r\n              )}\r\n            />\r\n          </Grid>\r\n          <Grid item lg={12} md={12} sm={12} xs={12} textAlign=\"right\">\r\n            <CustomButton\r\n              varient=\"contained\"\r\n              name={forgot.codeSent ? \"Resend\" : \"Send Code\"}\r\n              size=\"large\"\r\n              onclick={() => send()}\r\n            />\r\n          </Grid>\r\n          <Grid item lg={12} md={12} sm={12} xs={12}>\r\n            <FormGroup\r\n              disabled={!forgot.codeSent}\r\n              label=\"Code\"\r\n              required={true}\r\n              type=\"text\"\r\n              value={forgot.code}\r\n              onChange={(data) => setData(\"code\", data)}\r\n              onBlur={() => blurSetup(\"code\")}\r\n              validator={simpleValidator.current.message(\r\n                \"code\",\r\n                forgot.code,\r\n                \"required\",\r\n                {\r\n                  className: \"errorClass\",\r\n                }\r\n              )}\r\n            />\r\n          </Grid>\r\n          <Grid item lg={12} md={12} sm={12} xs={12}>\r\n            <PasswordFormGroup\r\n              disabled={!forgot.codeSent}\r\n              label=\"Password\"\r\n              required={true}\r\n              value={forgot.pass}\r\n              onChange={(data) => setData(\"pass\", data)}\r\n              onBlur={() => blurSetup(\"password\")}\r\n              validator={simpleValidator.current.message(\r\n                \"password\",\r\n                forgot.pass,\r\n                \"required|newPass\",\r\n                {\r\n                  className: \"errorClass\",\r\n                }\r\n              )}\r\n            />\r\n          </Grid>\r\n          <Grid item lg={12} md={12} sm={12} xs={12}>\r\n            <PasswordFormGroup\r\n              disabled={!forgot.codeSent}\r\n              label=\"Re-enter Password\"\r\n              required={true}\r\n              value={forgot.repass}\r\n              onChange={(data) => setData(\"repass\", data)}\r\n              onBlur={() => blurSetup(\"Re-enter Password\")}\r\n              validator={simpleValidator.current.message(\r\n                \"Re-enter Password\",\r\n                forgot.repass,\r\n                `required|in:${forgot.pass}`,\r\n                {\r\n                  className: \"errorClass\",\r\n                }\r\n              )}\r\n            />\r\n          </Grid>\r\n          <Grid item lg={12} md={12} sm={12} xs={12}>\r\n            <CustomButton\r\n              disabled={!forgot.codeSent}\r\n              varient=\"contained\"\r\n              name=\"Reset Password\"\r\n              fullWidth={true}\r\n              size=\"large\"\r\n              onclick={() => verify()}\r\n            />\r\n          </Grid>\r\n          <Grid item lg={12} md={12} sm={12} xs={12}>\r\n            <div\r\n              style={{\r\n                color: themeConfig.color4,\r\n                margin: \"10px 0px 80px 0px\",\r\n              }}\r\n            >\r\n              Return to{\" \"}\r\n              <NavLink color={themeConfig.color1} to=\"/login\">\r\n                Login\r\n              </NavLink>\r\n            </div>\r\n          </Grid>\r\n        </Grid>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ForgotPassComponent;\r\n","import ForgotPassComponent from \"../../components/ForgotPassword/ForgotPassComponent\";\r\n\r\nconst ForgotPass = () => {\r\n  return <ForgotPassComponent />;\r\n};\r\n\r\nexport default ForgotPass;\r\n"],"names":["useStyle","makeStyles","theme","register","padding","width","textAlign","margin","breakpoints","down","logo","height","title","fontWeight","fontSize","color","themeConfig","fontFamily","classes","history","useNavigate","simpleValidator","useRef","SimpleReactValidator","messages","in","validators","newPass","message","rule","val","params","validator","helpers","testRegex","config","messageReplace","replace","toSentence","required","useState","email","pass","repass","code","codeSent","forgot","setForgot","loading","setLoading","setDisplayError","dispatch","useDispatch","actions","bindActionCreators","sendMail","verifyForgot","send","current","fieldValid","old","showMessageFor","verify","allValid","data","password","showMessages","setData","field","blurSetup","className","LoadingComponent","Grid","container","spacing","item","lg","md","sm","xs","src","HerPlanIcon","style","marginTop","alt","FormGroup","label","type","value","onChange","onBlur","CustomButton","varient","name","size","onclick","disabled","PasswordFormGroup","fullWidth","to"],"sourceRoot":""}